###Logging in with correct credentials and as an admin
POST http://{{host}}:{{port}}/credentials
Content-Type: application/json

{
  "email_address": "test1@test.com",
  "password": "@Password1"
}

> {%
client.global.set("auth_token", response.body.token);
%}

###Good weather tests
###Get all paintings
GET http://{{host}}:{{port}}/paintings
Accept: application/json

> {%
client.test("Get all paintings request", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###Get painting with id 1
GET http://{{host}}:{{port}}/paintings/1
Accept: application/json

> {%
client.test("Get one painting request good weather", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###Post a painting
POST http://{{host}}:{{port}}/paintings
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "name": "last supper",
  "artist_name": "leonardo davinci",
  "year_of_origin": 679,
  "current_price": 9999,
  "end_date": "2021-12-02"
}

> {%
client.test("Post one painting request good weather", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
 %}

###Update painting with id 2
PUT http://{{host}}:{{port}}/paintings/2
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "id": 2,
  "name": "painting 2 edited",
  "artist_name": "artist name edited",
  "year_of_origin": 474,
  "current_price": 4747474,
  "end_date": "2069-12-02"
}

> {%
client.test("Update one painting request good weather", function() {
    client.assert(response.status === 200, "Response status is not 200");
});
 %}

###Delete painting with id 1
DELETE http://{{host}}:{{port}}/paintings/1
Accept: application/json
Authorization: Bearer {{auth_token}}

> {%
client.test("Delete one painting request good weather", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
 %}

###Bad weather tests

###Get painting with id that does not exist: 9
GET http://{{host}}:{{port}}/paintings/9
Accept: application/json

> {%
client.test("Get one painting request bad weather", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
%}

###Post a painting with empty fields
POST http://{{host}}:{{port}}/paintings
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "name": "",
  "artist_name": "",
  "year_of_origin": 679,
  "current_price": 9999,
  "end_date": ""
}

> {%
client.test("Post one painting request bad weather - empty fields", function() {
  client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Post a painting with incorrect data
POST http://{{host}}:{{port}}/paintings
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "name": "the house",
  "artist_name": "bach",
  "year_of_origin": "last year",
  "current_price": -1,
  "end_date": "2021-24-02"
}

> {%
client.test("Post one painting request bad weather - incorrect data", function() {
  client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Update painting but ids mismatch
PUT http://{{host}}:{{port}}/paintings/2
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "id": 1,
  "name": "painting 2 edited",
  "artist_name": "artist name edited",
  "year_of_origin": 474,
  "current_price": 4747474,
  "end_date": "2069-12-02"
}

> {%
client.test("Update one painting request bad weather - ids mismatch", function() {
    client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Update painting that does not exist
PUT http://{{host}}:{{port}}/paintings/9
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "id": 9,
  "name": "painting 2 edited",
  "artist_name": "artist name edited",
  "year_of_origin": 474,
  "current_price": 4747474,
  "end_date": "2069-12-02"
}

> {%
client.test("Update one painting request bad weather - painting does not exist", function() {
    client.assert(response.status === 404, "Response status is not 404");
});
 %}

###Update painting with empty and incorrect data
PUT http://{{host}}:{{port}}/paintings/1
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "id": 1,
  "name": "",
  "artist_name": "",
  "year_of_origin": 474,
  "current_price": -1,
  "end_date": "2069-12-34"
}

> {%
client.test("Update one painting request bad weather - empty & incorrect data", function() {
    client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Delete painting that does not exist
DELETE http://{{host}}:{{port}}/paintings/9
Accept: application/json
Authorization: Bearer {{auth_token}}

> {%
client.test("Delete one painting request bad weather - painting does not exist", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
 %}

###Logging in with correct credentials but not as an admin
POST http://{{host}}:{{port}}/credentials
Content-Type: application/json

{
  "email_address": "test2@test.com",
  "password": "@Password2"
}

> {%
client.global.set("auth_token", response.body.token);
%}

###Post a painting without admin priviledge
POST http://{{host}}:{{port}}/paintings
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "name": "painting",
  "artist_name": "artist",
  "year_of_origin": 679,
  "current_price": 9999,
  "end_date": "2021-12-01"
}

> {%
client.test("Post one painting request bad weather - not admin", function() {
  client.assert(response.status === 401, "Response status is not 400");
});
 %}