###Logging in with correct credentials
POST http://{{host}}:{{port}}/credentials
Content-Type: application/json

{
  "email_address": "test1@test.com",
  "password": "@Password1"
}

> {%
client.global.set("auth_token", response.body.token);
%}

###Good weather tests
###Get all bids
GET http://{{host}}:{{port}}/bids
Accept: application/json

> {%
client.test("Get all bids request good weather", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###Get bid with id 1
GET http://{{host}}:{{port}}/bids/1
Accept: application/json

> {%
client.test("Get one bid request good weather", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###Post a bid
POST http://{{host}}:{{port}}/bids
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "user_id": 1,
  "painting_id": 1,
  "amount": 1000
}

> {%
client.test("Post one bid request good weather", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
 %}

###Delete bid with id 1
DELETE http://{{host}}:{{port}}/bids/1
Accept: application/json
Authorization: Bearer {{auth_token}}

> {%
client.test("Delete one bid request good weather", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
 %}

###Bad weather tests

###Get bid with id that does not exist: 9
GET http://{{host}}:{{port}}/bids/9
Accept: application/json

> {%
client.test("Get one bid request bad weather", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
%}

###Post a bid with empty fields
POST http://{{host}}:{{port}}/bids
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "user_id": "",
  "painting_id": "",
  "amount": ""
}

> {%
client.test("Post one bid request bad weather - empty fields", function() {
  client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Post a bid with invalid user id
POST http://{{host}}:{{port}}/bids
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "user_id": 9,
  "painting_id": 1,
  "amount": 10
}

> {%
client.test("Post one bid request bad weather - invalid user id", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
 %}

###Post a bid with invalid painting id
POST http://{{host}}:{{port}}/bids
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "user_id": 1,
  "painting_id": 10,
  "amount": 10
}

> {%
client.test("Post one bid request bad weather - invalid painting id", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
 %}

###Post a bid with invalid amount (bid amount less than current auction price)
POST http://{{host}}:{{port}}/bids
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "user_id": 1,
  "painting_id": 1,
  "amount": 1
}

> {%
client.test("Post one bid request bad weather - invalid amount", function() {
  client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Delete bid that does not exist
DELETE http://{{host}}:{{port}}/bids/9
Accept: application/json
Authorization: Bearer {{auth_token}}

> {%
client.test("Post one painting request bad weather", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
 %}

###Logging in with correct credentials but not as an admin
POST http://{{host}}:{{port}}/credentials
Content-Type: application/json

{
  "email_address": "test2@test.com",
  "password": "@Password2"
}

> {%
client.global.set("auth_token", response.body.token);
%}

###Delete a bid without admin priviledge
DELETE http://{{host}}:{{port}}/bids/7
Content-Type: application/json
Authorization: Bearer {{auth_token}}

> {%
client.test("Delete one bid request bad weather - not admin", function() {
  client.assert(response.status === 401, "Response status is not 400");
});
 %}