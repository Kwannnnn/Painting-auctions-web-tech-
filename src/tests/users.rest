###Good weather tests
###Get all users
GET http://{{host}}:{{port}}/users
Accept: application/json

> {%
client.test("Get all users request", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###Get user with id 1
GET http://{{host}}:{{port}}/users/1
Accept: application/json

> {%
client.test("Get one user request good weather", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

###Post a user
POST http://{{host}}:{{port}}/users
Content-Type: application/json

{
  "username": "test69",
  "email_address": "test69@test.com",
  "password": "testing123",
  "roles": [
    "user"
  ]
}

> {%
client.test("Post one user request good weather", function() {
  client.assert(response.status === 201, "Response status is not 201");
});
 %}

###Update user with id 2
PUT http://{{host}}:{{port}}/users/2
Content-Type: application/json

{
  "id": 2,
  "username": "test69",
  "email_address": "test69@test.com",
  "password": "testytest",
  "roles": [
    "admin"
  ]
}

> {%
client.test("Update one user request good weather", function() {
    client.assert(response.status === 200, "Response status is not 200");
});
 %}

###Delete user with id 1
DELETE http://{{host}}:{{port}}/users/1
Accept: application/json

> {%
client.test("Delete one user request good weather", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
 %}

###Bad weather tests

###Get user with id that does not exist
GET http://{{host}}:{{port}}/users/10
Accept: application/json

> {%
client.test("Get one user request bad weather - nonexistent user", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
%}

###Post a user with empty fields
POST http://{{host}}:{{port}}/users
Content-Type: application/json

{
  "username": "",
  "email_address": "",
  "password": "",
  "roles": []
}

> {%
client.test("Post one user request bad weather - empty fields", function() {
  client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Post a user with incorrect data
POST http://{{host}}:{{port}}/users
Content-Type: application/json

{
  "username": "bobby",
  "email_address": "bob-email",
  "password": "bob",
  "roles": ["d"]
}

> {%
client.test("Post one user request - incorrect data", function() {
  client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Update user but ids mismatch
PUT http://{{host}}:{{port}}/users/2
Content-Type: application/json

{
  "id": 1,
  "username": "bobby",
  "email_address": "bob@email.com",
  "password": "bobpassword",
  "roles": [
    "admin"
  ]
}

> {%
client.test("Update one user request - ids mismatch", function() {
    client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Update user that does not exist
PUT http://{{host}}:{{port}}/users/10
Content-Type: application/json

{
  "id": 10,
  "username": "bobby",
  "email_address": "bob@email.com",
  "password": "bobpassword",
  "roles": [
    "admin"
  ]
}

> {%
client.test("Update one user request - nonexistent user", function() {
    client.assert(response.status === 404, "Response status is not 404");
});
 %}

###Update user with empty and incorrect data
PUT http://{{host}}:{{port}}/users/1
Content-Type: application/json

{
  "id": 10,
  "username": "",
  "email_address": "bob-mail-me",
  "password": "bob",
  "roles":[]
}

> {%
client.test("Update one user request - empty & incorrect data", function() {
    client.assert(response.status === 400, "Response status is not 400");
});
 %}

###Delete user that does not exist
DELETE http://{{host}}:{{port}}/users/10
Accept: application/json

> {%
client.test("Delete one user request - nonexistent user", function() {
  client.assert(response.status === 404, "Response status is not 404");
});
 %}